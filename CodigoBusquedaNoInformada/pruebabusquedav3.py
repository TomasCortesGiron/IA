# -*- coding: utf-8 -*-
"""PruebaBusquedaV3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12zfJKAycsUAg0WOWY1S_5YQ6dqg0dj6B
"""

from graphviz.files import Source
import random
from graphviz import Digraph

dot = Digraph(comment='The Test Table')

explorados = [] #La lista está vacía.
frontera = []

ruta = []

count = 0
level = 0
espacioFrontera = 0
countFrontera = []
ultimoExplorados = []

#Esto es una configuración de una Dupla, ([], [])
estado_inicial = ([4,2,1,3], "")

resultado = [1,2,3,4]


print("---Bienvenidos al juego---")
print("Para ejecutar los movimientos, por favor colocar los siguientes comandos:")
print("D: Intercambiar dos piezas a la derecha")
print("C: Intercambiar dos piezas en el centro")
print("I: Intercambiar dos piezas en la izquierda")

#while resultado  not in nodos: #El resultado va a comparar los arreglos guardados, y los va a comparar hasta que llegue al objetivo.

frontera.append(estado_inicial)
#print(estado_inicial)
#print(len(frontera))



while len(frontera) != 0:


  #print(frontera)
  nodo, ruta = frontera.pop()
  #print(frontera)
  if nodo == resultado:
    #print(guardar)
    #print(explorados)
    #print(nodo)
    #print(estado_inicial)
    #print(nodo, ruta)
 
    break;
    
    
  if nodo not in explorados:
    explorados.append(nodo)

    ultimoExplorados.append(nodo)

    dot.node(str(level), str(estado_inicial).replace("[", "(").replace("]", ")"))
    #dot.node(str(level), str(explorados[level])
    count = 1 + count

    #print(ultimoExplorados)

    #print(dot.source)

    ##print(count)
    

    nuevoNodoIzquierda = ([nodo[1], nodo[0], nodo[2], nodo[3]], ruta + " I")
    nuevoNodoCentro = ([nodo[0], nodo[2], nodo[1], nodo[3]], ruta + " C")
    nuevoNodoDerecha = ([nodo[0], nodo[1], nodo[3], nodo[2]], ruta + " D")

    nuevoNodoIzquierda2 = (nodo[1], nodo[0], nodo[2], nodo[3])
    nuevoNodoCentro2 = (nodo[0], nodo[2], nodo[1], nodo[3])
    nuevoNodoDerecha2 = (nodo[0], nodo[1], nodo[3], nodo[2])

    #Función append, permite agregar elementos a la lista.
    frontera.append(nuevoNodoIzquierda)
    frontera.append(nuevoNodoCentro)
    frontera.append(nuevoNodoDerecha)

    countFrontera.append(nuevoNodoIzquierda2)
    countFrontera.append(nuevoNodoCentro2)
    countFrontera.append(nuevoNodoDerecha2)
    espacioFrontera = len(countFrontera)

    for i  in range(espacioFrontera):
      a = i+1
      dot.node(str(a), str(countFrontera[i]))


      dot.edge(str(ultimoExplorados[level]).replace("[", "(").replace("]", ")"), str(countFrontera[i]))

    print(ultimoExplorados[level])
    level = 1 + level
    countFrontera.clear()
    #ultimoExplorados.clear()

    #ultimoExplorados = explorados.pop()
    


#dot.view()
dot